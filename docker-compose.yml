version: '3'

services: 
# build kafka container
  kafka:
    container_name: lakehouse-kafka
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - lakehouse_network

# create kafka topic depend on kafka container
# make sure that you run (chmod +x create_topic.sh) from the directory STOCK_ANALYSIS_APP before run docker-compose
# run this code after (docker compose up) to check list of Topics (sudo docker-compose exec kafka kafka-topics.sh --list --bootstrap-server localhost:9092)

  kafka-create-topic: 
    container_name: lakehouse-kafka-create-topic
    image: bitnami/kafka:latest 
    networks: 
      - lakehouse_network 
    command: [ "/bin/bash", "-c", "/create_topic.sh"] 
    environment: 
      - DEFAULT_TOPIC=default_topic
    depends_on: 
      kafka: 
        condition: service_started 
    volumes: 
      - type: bind 
        source: ./create_topic.sh 
        target: /create_topic.sh 
    init: true

#build Hadoop
  hadoop-namenode:
    container_name: lakehouse-hadoop-namenode
    image: apache/hadoop:3
    hostname: namenode
    command: ["hdfs", "namenode"]
    ports:
      - 9870:9870
    env_file:
      - ./config
    environment:
      ENSURE_NAMENODE_DIR: "/tmp/hadoop-root/dfs/name"
    networks:
      - lakehouse_network
  hadoop-datanode:
    container_name: lakehouse-hadoop-datanode
    image: apache/hadoop:3
    command: ["hdfs", "datanode"]
    env_file:
      - ./config  
    networks:
      - lakehouse_network    
  
  hadoop-datanode2:
    container_name: lakehouse-hadoop-datanode2
    image: apache/hadoop:3
    command: ["hdfs", "datanode"]
    env_file:
      - ./config
    networks:
      - lakehouse_network

  hadoop-datanode3:
    container_name: lakehouse-hadoop-datanode3
    image: apache/hadoop:3
    command: ["hdfs", "datanode"]
    env_file:
      - ./config
    networks:
      - lakehouse_network

  hadoop-resourcemanager:
    container_name: lakehouse-hadoop-resourcemanager
    image: apache/hadoop:3
    hostname: resourcemanager
    command: ["yarn", "resourcemanager"]
    ports:
        - 8088:8088
    env_file:
      - ./config
    volumes:
      - ./test.sh:/opt/test.sh
    networks:
      - lakehouse_network
  hadoop-nodemanager:
    container_name: lakehouse-hadoop-nodemanager
    image: apache/hadoop:3
    command: ["yarn", "nodemanager"]
    env_file:
      - ./config
    networks:
      - lakehouse_network

    # Add HiveServer2 service
  hiveserver2:
    image: apache/hive:4.0.0
    container_name: hiveserver2
    environment:
      SERVICE_NAME: hiveserver2
    ports:
      - "10000:10000"
      - "10002:10002"
    networks:
      - lakehouse_network

  # Add Metastore service
  metastore:
    image: apache/hive:4.0.0
    container_name: metastore
    environment:
      SERVICE_NAME: metastore
    ports:
      - "9083:9083"
    depends_on:
      - hadoop-namenode
      - hadoop-datanode
    networks:
      - lakehouse_network

# Use Apache Spark 
  spark-master:
    image: apache/spark:latest
    container_name: spark-master
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
    networks:
      - lakehouse_network

  spark-worker:
    image: apache/spark:latest
    container_name: spark-worker
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    environment:
      - SPARK_WORKER_MEMORY=1g
      - SPARK_WORKER_CORES=1
    depends_on:
      - spark-master
    networks:
      - lakehouse_network

networks:
  lakehouse_network:

volumes:
  backend_data:
  kafka_data: